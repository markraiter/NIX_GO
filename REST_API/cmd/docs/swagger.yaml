basePath: /api/v1
definitions:
  models.Comment:
    properties:
      body:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      postId:
        type: integer
    type: object
  models.Post:
    properties:
      body:
        type: string
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      id:
        type: integer
      title:
        type: string
      userId:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: Example REST_API for demonstrating Swagger with Echo framework.
  title: Echo Swagger Example REST_API
  version: 1.0.0.
paths:
  /api/v1/comments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a comment from the database by ID.
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Comment deleted successfully
        "404":
          description: Comment not found
          schema:
            type: string
        "500":
          description: Error deleting comment
          schema:
            type: string
      summary: Delete a comment by ID
      tags:
      - Comments
    put:
      consumes:
      - application/json
      description: Update a comment in the database by ID.
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Invalid comment data
          schema:
            type: string
        "404":
          description: Comment not found
          schema:
            type: string
        "500":
          description: Error updating comment
          schema:
            type: string
      summary: Update a comment by ID
      tags:
      - Comments
  /api/v1/posts:
    get:
      consumes:
      - application/json
      description: Get all posts from the database.
      produces:
      - application/json
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
        "500":
          description: Error fetching post
          schema:
            type: string
      summary: Get all posts
      tags:
      - Posts
    post:
      consumes:
      - application/json
      description: Create a new post with the specified data.
      parameters:
      - description: Post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Invalid post data
          schema:
            type: string
        "500":
          description: Error creating post
          schema:
            type: string
      summary: Create a new post
      tags:
      - Posts
  /api/v1/posts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a post from the database by ID.
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Post deleted successfully
        "404":
          description: Post not found
          schema:
            type: string
        "500":
          description: Error deleting post
          schema:
            type: string
      summary: Delete a post by ID
      tags:
      - Posts
    get:
      consumes:
      - application/json
      description: Get a post from the database by ID.
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
        "404":
          description: Post not found
          schema:
            type: string
      summary: Get a post by ID
      tags:
      - Posts
    put:
      consumes:
      - application/json
      description: Update a post in the database by ID.
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Invalid post data
          schema:
            type: string
        "404":
          description: Post not found
          schema:
            type: string
        "500":
          description: Error updating post
          schema:
            type: string
      summary: Update a post by ID
      tags:
      - Posts
  /api/v1/posts/{post_id}/comments:
    post:
      consumes:
      - application/json
      description: Create a new comment for a post with the specified data.
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: integer
      - description: Comment data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Invalid comment data
          schema:
            type: string
        "404":
          description: Post not found
          schema:
            type: string
        "500":
          description: Error creating comment
          schema:
            type: string
      summary: Create a new comment for a post
      tags:
      - Comments
  /login:
    post:
      consumes:
      - application/json
      description: logs in user with email and password
      parameters:
      - description: Email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: Password
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: token
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Login
      tags:
      - Authentification
  /registration:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          type: object
      - description: JWT token
        in: body
        name: token
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Create a new user account
      tags:
      - Authentification
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
